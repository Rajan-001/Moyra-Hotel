// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int       @id @default(autoincrement())
  booking    Booking[]
  name       String
  password   String?
  email      String?
  provider   String?
  upadatedAt DateTime  @updatedAt

  Payments Payments[]
}

model Places {
  id     Int      @id @default(autoincrement())
  name   String
  hotels Hotels[]
}

model Hotels {
  hotel_id   Int       @id @default(autoincrement())
  hotel_name String
  booking    Booking[]
  place_id   Int
  price      Int
  place      Places    @relation(fields: [place_id], references: [id])
}

model Booking {
  id         Int      @id @default(autoincrement())
  checkIn    DateTime
  checkOut   DateTime
  time       Int
  currency   String
  hotel_id   Int
  amount     Int
  booking_id String   @unique
  receipt    String
  status     Status   @default(pending)
  Hotels     Hotels   @relation(fields: [hotel_id], references: [hotel_id])
  userId     Int
  users      User     @relation(fields: [userId], references: [id])

  Payments Payments[]
}

model Payments {
  id                  Int      @id @default(autoincrement())
  orderId             String   @unique
  razorpay_payment_id String   @unique
  razorpay_signature  String?
  status              Status   @default(pending) // SUCCESS, REFUNDED, FAILED
  paymentDate         DateTime @default(now())
  razorpay_order_id   String   @unique
  order               Booking  @relation(fields: [orderId], references: [booking_id])
  userId              Int
  UserInfo            User     @relation(fields: [userId], references: [id])
}

enum Status {
  pending
  success
  failed
  created
  attempted
  paid
}
